/* ------------------------------------------
 *
 *                  IMPORT
 * 
 * ------------------------------------------
 */

import * as MapDOM from 'MapDOM';

/* ------------------------------------------
 *
 *                 INTERFACES
 * 
 * ------------------------------------------
 */

interface InfoBox {

  window   : google.maps.InfoWindow;
  DOMNode  : HTMLDivElement | null;

}

interface PinPrimitive {

  name         : string;
  description? : string;
  latLng       : google.maps.LatLng;

}

interface PinObject extends PinPrimitive {

  controller : MapController;
  marker     : google.maps.Marker;

}

/* ------------------------------------------
 *
 *                    PIN
 * 
 * ------------------------------------------
 */

class Pin implements PinObject {

  /*  Description:
   *    The standard Pin class. Generated and used to represent every pin on the map embed. Each pin has member functions that
   *    handle its listener generation, infobox generation & handling, and hiding from the map.
   *
   *  Expects:
   *    - pin =>
   *        {
   *          map        : 'MAP_EMBED',
   *          mapDOMNode : 'MAP_DOM_NODE',
   *          marker     : 'MAP_MARKER',
   *          name       : 'PIN_NAME',
   *          latLng     : 'PIN_LATLNG'
   *        }
   */

  controller      : MapController;
  marker          : google.maps.Marker;
  name            : string;
  description?    : string;
  latLng          : google.maps.LatLng;
  clickListener   : google.maps.MapsEventListener | null;

  #infoBox : InfoBox | null;

  set infoBox(newBox: InfoBox | null) {

    if (newBox) {

      this.#infoBox = {

        window  : newBox.window,
        DOMNode : MapDOM.getMapElement(newBox.window)

      };
      
    } else {

      this.#infoBox = null;
      
    }

  }

  get infoBox(): InfoBox | null {

    return (this.#infoBox ? this.#infoBox : null);

  }

  constructor(controller: MapController, pin: PinObject) {

    this.controller    = controller;
    this.marker        = pin.marker;      // Marker generated by the Maps API.
    this.name          = pin.name;        // Pin's name.
    this.description   = pin.description; // Optional text description.
    this.latLng        = pin.latLng;      // latLng generated by the Maps API. Used to access the latitude & longitude.
    this.clickListener = null;            // Click listener. Generated when calling member function generateListener().

    this.#infoBox      = null;            // Infobox. Generated when calling member function showInfo().

    this.generateListener = this.generateListener.bind(this);
    this.showInfo         = this.showInfo.bind(this);
    this._handleInfoBox   = this._handleInfoBox.bind(this);
    this._confirmDelete   = this._confirmDelete.bind(this);
    this.hide             = this.hide.bind(this);

  }

  generateListener(): void {

    const mapEvent     = window.mapEvent;
    this.clickListener = mapEvent.addListenerOnce(this.marker, 'click', this.showInfo);
    
  }

  showInfo(): void {

    /*  Description:
     *    Calls MapDOM to generate the current pin's infobox. Then handles logical interactions with member function _handleInfoBox().
     *
     */

    const mapEvent      = window.mapEvent;
    const mapController = window.mapController;
    const mapEmbed      = this.controller.mapEmbed;

    let context: PinPrimitive = {

      name        : this.name,
      latLng      : this.latLng,
      description : this.description

    }

    let infoWindow = mapController.generateInfoBox(this.latLng, MapDOM.HTMLGen.PinInfo(context));

    if (infoWindow) {

      mapEmbed.panTo(this.latLng);

      mapEvent.addListenerOnce(infoWindow, 'domready', () => {

        this.infoBox = {

          window  : (infoWindow as google.maps.InfoWindow),
          DOMNode : null

        };

        this._handleInfoBox(this.infoBox);
  
      });
      
    }

  }

  private _handleInfoBox(infoBox: InfoBox): void {

    const mapEvent = window.mapEvent;

    let trashButton = <HTMLElement>infoBox.DOMNode?.querySelector(`.trash-button-container > button.trash-button`);

    mapEvent.addDomListenerOnce(trashButton, 'click', () => {

      this._confirmDelete(infoBox);

    });

    // - - - -
    
    mapEvent.addListenerOnce(infoBox, 'closeclick', () => {

      infoBox.window.close();

      this.infoBox = null;
      this.generateListener();

    });

  }

  private _confirmDelete(infoBox: InfoBox): void {

    const mapEvent      = window.mapEvent;
    const mapController = window.mapController;

    let buttonContainer = <HTMLElement>infoBox.DOMNode?.querySelector(`.trash-button-container`);
    let trashButton     = <HTMLElement>infoBox.DOMNode?.querySelector(`.trash-button-container > button.trash-button`);

    let confirmText: HTMLElement;
    let checkButton: HTMLElement;
    let xButton: HTMLElement;

    // Hide the trash button and prompt the user for confirmation.
    buttonContainer.removeChild(trashButton);
    buttonContainer.insertAdjacentHTML('afterbegin', MapDOM.HTMLGen.ConfirmText());

    // Query select for listener interactions.
    confirmText = <HTMLElement>buttonContainer.querySelector('.are-you-sure');
    checkButton = <HTMLElement>buttonContainer.querySelector('.fas.fa-check-circle');
    xButton     = <HTMLElement>buttonContainer.querySelector('.fas.fa-times-circle');

    // Confirm deletion.
    mapEvent.addDomListenerOnce(checkButton,'click', () => {

      mapController.removePin(this);

    });

    // Cancel deletion.
    mapEvent.addDomListenerOnce(xButton, 'click', () => {

      buttonContainer.removeChild(confirmText);
      buttonContainer.insertAdjacentHTML('afterbegin', MapDOM.HTMLGen.TrashButton());

      // Reset the infobox by clearing listeners and calling the handler again.
      mapEvent.clearInstanceListeners(infoBox);

      this._handleInfoBox(infoBox);

    });

  }

  hide(): void {

    this.marker.setMap(null);

    if (this.clickListener)  this.clickListener.remove();
    if (this.infoBox)        this.infoBox.window.close();

    this.clickListener = null;
    this.infoBox       = null;

  }

}

/* ------------------------------------------
 *
 *                  MAP API
 * 
 * ------------------------------------------
 */

class MapController {

  /*  Description:
   *    Used to handle all interactions directly associated with the map embed. e.g. Generating new pins, removing pins,
   *    loading / clearing map, synchronising the pin list with React components, etc.
   *
   *  Expects:
   *    - mapEmbed   => A map embed linked with the Maps API.
   *    - mapDOMNode => The DOM node that holds the associated map embed.
   */

  mapEmbed: google.maps.Map;
  mapDOMNode: HTMLDivElement;

  pinList: Array<Pin>;
  formOpen: boolean;

  updateReact: (places: Array<Pin>) => void;

  constructor(mapEmbed: google.maps.Map, updateReact: (places: Array<Pin>) => void) {

    const mapEvent = window.mapEvent;

    this.mapEmbed   = mapEmbed;
    this.mapDOMNode = MapDOM.getMapElement(mapEmbed);
    
    this.pinList  = [];
    this.formOpen = false;

    this.generateNewPin  = this.generateNewPin.bind(this);
    this.generateInfoBox = this.generateInfoBox.bind(this);
    this.clearMap        = this.clearMap.bind(this);
    this.loadMap         = this.loadMap.bind(this);
    this.addPin          = this.addPin.bind(this);
    this.removePin       = this.removePin.bind(this);

    // null until the React Map component passes the function.
    this.updateReact = updateReact;


    mapEvent.addListener(this.mapEmbed, 'click', (event: google.maps.MapMouseEvent) => {

      if (!this.formOpen && event.latLng) {
      
        this.generateNewPin(event.latLng);

      }

    });

  }

  generateNewPin(latLng: google.maps.LatLng): void {

    /*  Description:
     *    Calls MapDOM to generate a new pin form. Prepares a generic pin object to be passed to member function
     *    _handleNewPinForm() for handling logical interactions and constructing a new Pin instance.
     * 
     *  Expects:
     *    - event => Event parameter passed by the map's click listener.
     */

    const google   = window.google;
    const mapEvent = window.mapEvent;

    let newInfoForm = this.generateInfoBox(latLng, MapDOM.HTMLGen.NewPinForm());

    let newMarker = new google.maps.Marker({

      position : latLng,
      map      : this.mapEmbed

    });

    mapEvent.addListenerOnce(newInfoForm, 'domready', () => {

      let newPin = {

        marker  : newMarker,
        infoBox : newInfoForm,
        latLng  : latLng

      }

      this._handleNewPinForm(newPin);

    });

  }

  generateInfoBox(latLng: google.maps.LatLng, html: string | Node): google.maps.InfoWindow | null {

    /*  Description:
     *    Calls the Maps API to generate an infobox on the map embed at the given latLng and with the given HTML content.
     *
     *  Expects:
     *    - latLng => An API latLng object denoting the coordinates to generate the infobox.
     *    - html   => The HTML content to display within the infobox.
     */

    const google = window.google;

    try {

      let offset  = new google.maps.Size(0, -35, 'pixel', 'pixel');
      let infoBox = new google.maps.InfoWindow();
  
      infoBox.setPosition(latLng);
      infoBox.setContent(html);
      infoBox.setOptions({ pixelOffset: offset });
      infoBox.open(this.mapEmbed);

      return infoBox;
      
    } catch (err) {

      console.error(new Error(err));

      return null;
      
    }    

  }

  private _handleNewPinForm(newPin: PinObject): void {

    /*  Description:
     *    Handles logical interactions for a new pin form. Consolidates user input and pin information to generate a new Pin instance.
     *
     *  Expects:
     *    - newPin =>
     *        {
     *          marker  : 'MAP_MARKER',
     *          infoBox : 'NEW_PIN_INFOFORM',
     *          latLng  : 'NEW_PIN_LATLNG'
     *        }
     */

    const mapEvent = window.mapEvent;

    let infoForm              = this.mapDOMNode.querySelector('.pin-infoform-container');
    let infoForm_nameField    = infoForm.querySelector('input.pin-infoform-name');
    let infoForm_descField    = infoForm.querySelector('textarea.pin-infoform-description');
    let infoForm_saveButton   = infoForm.querySelector('button[name="save"]');
    let infoForm_cancelButton = infoForm.querySelector('button[name="cancel"]');

    let formattedPinName;
    let newPinName;

    this.formOpen = true;

    // Save event
    mapEvent.addDomListener(infoForm_saveButton, 'click', () => {

      formattedPinName  = (infoForm_nameField.value ? infoForm_nameField.value.trim()       : null);
      newPinName        = (formattedPinName         ? formattedPinName.replace(/\s+/g, ' ') : null);

      if (newPinName) {

        newPin.infoBox.close();

        let pin = new Pin({

          map    : this.mapEmbed,
          mapDOMNode : this.mapDOMNode,
          marker : newPin.marker,
          name   : newPinName,
          latLng : newPin.latLng

        });

        if (infoForm_descField.value)
          pin.description = infoForm_descField.value;

        pin.generateListener();

        this.addPin(pin);

        this.formOpen = false;

      } else {

        alert('You must enter a name for a new pin.');

      }

    });

    // Exit event
    mapEvent.addDomListener(infoForm_cancelButton, 'click', () => {

      newPin.marker.setMap(null);
      newPin.infoBox.close();

      this.formOpen = false;

    });

    // Exit event
    mapEvent.addListener(newPin.infoBox, 'closeclick', () => {

      newPin.marker.setMap(null);
      newPin.infoBox.close();

      this.formOpen = false;

    });    

  }

  clearMap() {

    /*  Description:
     *    Hide all currently displayed pins and clear the map's pin list, then update the React places list.
     */

    // **FIX: Clearing map does not close a new pin form, if one is rendered.

    this.pinList.forEach((pin) => {

      pin.hide();

    });

    this.pinList = [];
    this.updateReact(this.pinList);

  }

  loadMap(newPins) {

    /*  Description:
     *    Render a new map with the given pin list, then update the React places list.
     *
     *  Expects:
     *    - newPins =>
     *        [
     *          {
     *            name        : 'PIN_NAME',
     *            description : 'PIN_DESC',
     *            lat         : 'PIN_LAT',
     *            lng         : 'PIN_LNG'
     *          },
     *          . . .
     *        ]
     */

    const google = window.google;

    newPins.forEach((newPin) => {

      let coords = { lat: parseFloat(newPin.lat), lng: parseFloat(newPin.lng) };

      let newLatLng = new google.maps.LatLng(coords);

      let marker = new google.maps.Marker({

        position : newLatLng,
        map      : this.mapEmbed

      });

      let pin = new Pin({

        map    : this.mapEmbed,
        mapDOMNode : this.mapDOMNode,
        marker : marker,
        name   : newPin.name,
        latLng : newLatLng

      });

      if (newPin.description)
        pin.description = newPin.description;

      pin.generateListener();

      this.pinList.push(pin);

    });

    this.updateReact(this.pinList);

  }

  addPin(pin) {

    /*  Expects:
     *    - pin => A Pin instance.
     */

    this.pinList.push(pin);
    this.updateReact(this.pinList);

  }

  removePin(pin) {

    /*  Expects:
     *    - pin => A Pin instance.
     */

    pin.hide();
    this.pinList.splice(this.pinList.indexOf(pin), 1);
    this.updateReact(this.pinList);

  }

}

/* ------------------------------------------
 *
 *                  EXPORT
 * 
 * ------------------------------------------
 */

export default MapController;
