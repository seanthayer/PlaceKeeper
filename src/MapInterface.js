class Pin {
  constructor(pin) {
    this.map            = pin.map;
    this.marker         = pin.marker;     // A 'Marker' object, generated by the Maps API.
    this.name           = pin.name;       // Name.
    this.latLng         = pin.latLng;     // A 'LatLng' object, generated by the Maps API. Used to access the latitude & longitude.
    this.clickListener  = null;           // A listener, generated and assigned during render.
    this.infoBox        = null;           // An info box, generated and assigned upon the listener trigger.
    this.description    = null;           // A text description, optional. Displayed within info box.

    this.generateListener = this.generateListener.bind(this);
    this.showInfo = this.showInfo.bind(this);
    this.hide = this.hide.bind(this);
  }

  generateListener() {
    const mapEvent = window.mapEvent;
    
    this.clickListener = mapEvent.addListenerOnce(this.marker, 'click', this.showInfo);
  }

  showInfo(event) {
    const mapEvent = window.mapEvent;
    const mapInterface = window.mapInterface;
    const HTMLGen = window.HTMLGen;

    let context = {
      name: this.name,
      latLng: this.latLng
    }

    if (this.description) context.description = this.description;

    this.map.panTo(event.latLng);
    this.infoBox = mapInterface.generateInfoBox(event.latLng, HTMLGen.PinInfo(context));

    mapEvent.addListenerOnce(this.infoBox, 'domready', () => {

      this._handleInfoBox();

    });

  }

  _handleInfoBox() {
    const mapEvent = window.mapEvent;

    // TODO: Add pin deletion

    mapEvent.addListenerOnce(this.infoBox, 'closeclick', () => {

      this.infoBox.close();
      this.clickListener = mapEvent.addListenerOnce(this.marker, 'click', this.showInfo);

    });
  }

  hide() {
    this.marker.setMap(null);

    if (this.clickListener)  this.clickListener.remove();
    if (this.infoBox)        this.infoBox.close();
  }
}

class MapInterface {
  constructor(mapEmbed, mapDOMNode) {
    this.mapEmbed   = mapEmbed;
    this.mapDOMNode = mapDOMNode;
    
    this.pinList = [];

    this.generateNewPin = this.generateNewPin.bind(this);
    this.generateInfoBox = this.generateInfoBox.bind(this);
  }

  generateNewPin(event) {
    const google = window.google;
    const mapEvent = window.mapEvent;
    const HTMLGen = window.HTMLGen;

    let newInfoForm = this.generateInfoBox(event.latLng, HTMLGen.NewPinForm());

    let newMarker = new google.maps.Marker({

      position: event.latLng,
      map: this.mapEmbed

    });

    mapEvent.addListenerOnce(newInfoForm, 'domready', () => {

      let newPin = {

        marker: newMarker,
        infoBox: newInfoForm,
        latLng: event.latLng

      }

      this._handleNewPinForm(newPin);

    });

  }

  generateInfoBox(latLng, html) {
    const google = window.google;

    let offset = new google.maps.Size(0, -35, 'pixel', 'pixel');
    let infoBox = new google.maps.InfoWindow();

    infoBox.setPosition(latLng);
    infoBox.setContent(html);
    infoBox.setOptions({ pixelOffset: offset });
    infoBox.open(this.mapEmbed);

    return infoBox;
  }

  _handleNewPinForm(newPin) {
    const mapEvent = window.mapEvent;

    let infoForm = this.mapDOMNode.querySelector('.pin-infoform-container');
    let infoForm_nameField = infoForm.querySelector('input.pin-infoform-name');
    let infoForm_descField = infoForm.querySelector('textarea.pin-infoform-description');
    let infoForm_saveButton = infoForm.querySelector('button[name="save"]');
    let infoForm_cancelButton = infoForm.querySelector('button[name="cancel"]');

    // Save event
    mapEvent.addDomListener(infoForm_saveButton, 'click', () => {

      if (infoForm_nameField.value) {

        newPin.infoBox.close();

        let pin = new Pin({

          map:    this.mapEmbed,
          marker: newPin.marker,
          name:   infoForm_nameField.value,
          latLng: newPin.latLng

        });

        if (infoForm_descField.value) pin.description = infoForm_descField.value;

        pin.generateListener();

        this._addPin(pin);

        mapEvent.addListenerOnce(this.mapEmbed, 'click', this.generateNewPin);

      } else {

        alert('You must enter a name for a new pin.');

      }

    });
    // -

    // Exit event
    mapEvent.addDomListener(infoForm_cancelButton, 'click', () => {

      newPin.marker.setMap(null);
      newPin.infoBox.close();
      mapEvent.addListenerOnce(this.mapEmbed, 'click', this.generateNewPin);

    });

    mapEvent.addListener(newPin.infoBox, 'closeclick', () => {

      newPin.marker.setMap(null);
      newPin.infoBox.close();
      mapEvent.addListenerOnce(this.mapEmbed, 'click', this.generateNewPin);

    });
    // -
  }

  _addPin(pin) {

    this.pinList.push(pin);

  }

  _removePin(pin) {
    
    pin.hide();
    this.pinList.splice(this.pinList.indexOf(pin), 1);

  }
}

export default MapInterface;